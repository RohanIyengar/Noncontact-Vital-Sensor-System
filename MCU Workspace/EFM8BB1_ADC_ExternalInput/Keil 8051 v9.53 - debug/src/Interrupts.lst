C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/11/2017 16:38:12 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\SiliconLabs\S
                    -implicityStudio\v4\developer\sdks\8051\v4.0.3\examples\EFM8BB1_SLSTK2020A\ADC\ExternalInput\src\Interrupts.c OMF2 SMALL 
                    -DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMO
                    -TE INCDIR(C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\8051\v4.0.3\examples\EFM8BB1_SLSTK2020A\ADC\ExternalInput\in
                    -c;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/
                    -SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sd
                    -ks/8051/v4.0.3//Device/EFM8BB1/inc) PRINT(.\src\Interrupts.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrup
                    -ts.OBJ)

line level    source

   1          
   2          
   3          //=========================================================
   4          // src/Interupts.c: generated by Hardware Configurator
   5          //
   6          // This file will be regenerated when saving a document.
   7          // leave the sections inside the "$[...]" comment tags alone
   8          // or they will be overwritten!
   9          //=========================================================
  10          
  11          // USER INCLUDES                        
  12          #include <SI_EFM8BB1_Register_Enums.h>
  13          #include "retargetserial.h"
  14          
  15          //-----------------------------------------------------------------------------
  16          // Global CONSTANTS
  17          //-----------------------------------------------------------------------------
  18          #define UART_BUFFERSIZE        64
  19          //-----------------------------------------------------------------------------
  20          // Global Variables
  21          //-----------------------------------------------------------------------------
  22          uint8_t UART_Buffer[UART_BUFFERSIZE];
  23          uint8_t UART_Buffer_Size = 0;
  24          uint8_t UART_Input_First = 0;
  25          uint8_t UART_Output_First = 0;
  26          uint8_t TX_Ready =1;
  27          uint8_t Byte = 0;
  28          
  29          uint32_t mV;// Measured voltage in mV
  30          
  31          //-----------------------------------------------------------------------------
  32          // ADC0EOC_ISR
  33          //-----------------------------------------------------------------------------
  34          //
  35          // ADC0EOC ISR Content goes here. Remember to clear flag bits:
  36          // ADC0CN0::ADINT (Conversion Complete Interrupt Flag)
  37          //
  38          // This ISR averages 2048 samples then prints the result to the terminal.  The
  39          // ISR is called after each ADC conversion which is triggered by Timer2.
  40          //
  41          //-----------------------------------------------------------------------------
  42          SI_INTERRUPT (ADC0EOC_ISR, ADC0EOC_IRQn)
  43          {
  44   1              static uint32_t accumulator = 0;     // Accumulator for averaging
  45   1              static uint16_t measurements = 2048;// Measurement counter
  46   1              uint32_t result = 0;
  47   1              uint32_t high,low,total;
  48   1              ADC0CN0_ADINT = 0;// Clear ADC0 conv. complete flag
  49   1      
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/11/2017 16:38:12 PAGE 2   

  50   1              //accumulator += ADC0;
  51   1              high = ADC0H;
  52   1              low = ADC0L;
  53   1              total = ADC0;
  54   1              accumulator += (high*256) + ADC0L;
  55   1              measurements--;
  56   1      
  57   1              if(measurements == 0)
  58   1              {
  59   2                      measurements = 2048;
  60   2                      result = accumulator / 2048;
  61   2                      accumulator = 0;
  62   2      
  63   2                      // The 12-bit ADC value is averaged across 2048 measurements.
  64   2                      // The measured voltage applied to P0.0 is then:
  65   2                      //
  66   2                      //                           Vref (mV)
  67   2                      //   measurement (mV) =   --------------- * result (bits)
  68   2                      //                       (2^12)-1 (bits)
  69   2      
  70   2                      mV = (result * 3300) / 4092;
  71   2                      //RETARGET_PRINTF ("\nP0.0 voltage: %ld mV\n", mV);
  72   2                      TX_Ready = 1;
  73   2              }
  74   1      
  75   1      }
  76          
  77          //-----------------------------------------------------------------------------
  78          // TIMER2_ISR
  79          //-----------------------------------------------------------------------------
  80          //
  81          // TIMER2 ISR Content goes here. Remember to clear flag bits:
  82          // TMR2CN0::TF2H (Timer # High Byte Overflow Flag)
  83          // TMR2CN0::TF2L (Timer # Low Byte Overflow Flag)
  84          //
  85          //-----------------------------------------------------------------------------
  86          SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn)
  87          {
  88   1      
  89   1      }
  90          
  91          //-----------------------------------------------------------------------------
  92          // UART0_ISR
  93          //-----------------------------------------------------------------------------
  94          //
  95          // UART0 ISR Content goes here. Remember to clear flag bits:
  96          // SCON0::RI (Receive Interrupt Flag)
  97          // SCON0::TI (Transmit Interrupt Flag)
  98          //
  99          //-----------------------------------------------------------------------------
 100          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
 101          {
 102   1                 if (SCON0_RI == 1)
 103   1                 {
 104   2                       SCON0_RI = 0;
 105   2                       Byte = SBUF0;
 106   2                 }
 107   1      
 108   1                 if (SCON0_TI == 1)                        // Check if transmit flag is set
 109   1                 {
 110   2                    SCON0_TI = 0;               // Clear interrupt flag
 111   2                    SBUF0 = 52;                 // Transmit to Hyperterminal
 112   2                 }
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/11/2017 16:38:12 PAGE 3   

 113   1      }
 114          
 115          
 116          
 117          
 118          
 119          
 120          
 121          
 122          
 123          
 124          /*
 125          
 126          
 127          
 128          
 129          
 130          
 131          
 132          
 133          //=========================================================
 134          // src/Interrupts.c: generated by Hardware Configurator
 135          //
 136          // This file will be regenerated when saving a document.
 137          // leave the sections inside the "$[...]" comment tags alone
 138          // or they will be overwritten!
 139          //=========================================================
 140          
 141          
 142          // USER INCLUDES
 143          #include <SI_EFM8BB1_Register_Enums.h>
 144          
 145          //-----------------------------------------------------------------------------
 146          // Global CONSTANTS
 147          //-----------------------------------------------------------------------------
 148          #define UART_BUFFERSIZE        64
 149          
 150          //-----------------------------------------------------------------------------
 151          // Global Variables
 152          //-----------------------------------------------------------------------------
 153          uint8_t UART_Buffer[UART_BUFFERSIZE];
 154          uint8_t UART_Buffer_Size = 0;
 155          uint8_t UART_Input_First = 0;
 156          uint8_t UART_Output_First = 0;
 157          uint8_t TX_Ready =1;
 158          uint8_t Byte = 0;
 159          
 160          //-----------------------------------------------------------------------------
 161          // UART0_ISR
 162          //-----------------------------------------------------------------------------
 163          //
 164          // UART0 ISR Content goes here. Remember to clear flag bits:
 165          // SCON0::RI (Receive Interrupt Flag)
 166          // SCON0::TI (Transmit Interrupt Flag)
 167          //
 168          // This routine is invoked whenever a character is entered or displayed on the
 169          // Hyperterminal.
 170          //
 171          //-----------------------------------------------------------------------------
 172          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
 173          {
 174                     if (SCON0_RI == 1)
 175                     {
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/11/2017 16:38:12 PAGE 4   

 176                        if( UART_Buffer_Size == 0)  {    // If new word is entered
 177                           UART_Input_First = 0;    }
 178          
 179                        SCON0_RI = 0;                          // Clear interrupt flag
 180          
 181                        Byte = SBUF0;                    // Read a character from UART
 182          
 183                        if (UART_Buffer_Size < UART_BUFFERSIZE)
 184                        {
 185                           UART_Buffer[UART_Input_First] = Byte; // Store in array
 186          
 187                           UART_Buffer_Size++;           // Update array's size
 188          
 189                           UART_Input_First++;           // Update counter
 190                        }
 191                     }
 192          
 193                     if (SCON0_TI == 1)                        // Check if transmit flag is set
 194                     {
 195                        SCON0_TI = 0;                          // Clear interrupt flag
 196          
 197                        if (UART_Buffer_Size != 1)       // If buffer not empty
 198                        {
 199                           // If a new word is being output
 200                           if ( UART_Buffer_Size == UART_Input_First ) {
 201                                UART_Output_First = 0;  }
 202          
 203                           // Store a character in the variable byte
 204                           Byte = UART_Buffer[UART_Output_First];
 205          
 206                           if ((Byte >= 0x61) && (Byte <= 0x7A)) { // If upper case letter
 207                              Byte -= 32; }
 208          
 209                           SBUF0 = Byte;                 // Transmit to Hyperterminal
 210          
 211                           UART_Output_First++;          // Update counter
 212          
 213                           UART_Buffer_Size--;           // Decrease array size
 214          
 215                        }
 216                        else
 217                        {
 218                           UART_Buffer_Size = 0;         // Set the array size to 0
 219                           TX_Ready = 1;                 // Indicate transmission complete
 220                        }
 221                     }
 222          }
 223          
 224          SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn)
 225          {
 226          
 227          }
 228          
 229          SI_INTERRUPT (ADC0EOC_ISR, ADC0EOC_IRQn)
 230          {}
 231          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    286    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/11/2017 16:38:12 PAGE 5   

   DATA SIZE        =     79      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
