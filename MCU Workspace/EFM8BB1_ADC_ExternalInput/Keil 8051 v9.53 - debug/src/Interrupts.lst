C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/24/2017 15:33:49 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\SiliconLabs\S
                    -implicityStudio\v4\developer\sdks\8051\v4.0.3\examples\EFM8BB1_SLSTK2020A\ADC\ExternalInput\src\Interrupts.c OMF2 SMALL 
                    -DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMO
                    -TE INCDIR(C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\8051\v4.0.3\examples\EFM8BB1_SLSTK2020A\ADC\ExternalInput\in
                    -c;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/
                    -SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sd
                    -ks/8051/v4.0.3//Device/EFM8BB1/inc) PRINT(.\src\Interrupts.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrup
                    -ts.OBJ)

line level    source

   1          
   2          
   3          //=========================================================
   4          // src/Interupts.c: generated by Hardware Configurator
   5          //
   6          // This file will be regenerated when saving a document.
   7          // leave the sections inside the "$[...]" comment tags alone
   8          // or they will be overwritten!
   9          //=========================================================
  10          
  11          // USER INCLUDES                        
  12          #include <SI_EFM8BB1_Register_Enums.h>
  13          #include "retargetserial.h"
  14          
  15          //-----------------------------------------------------------------------------
  16          // Global CONSTANTS
  17          //-----------------------------------------------------------------------------
  18          #define UART_BUFFERSIZE        64
  19          #define NOT_SENDING                     8
  20          //-----------------------------------------------------------------------------
  21          // Global Variables
  22          //-----------------------------------------------------------------------------
  23          uint8_t UART_Buffer[UART_BUFFERSIZE];
  24          uint8_t UART_Buffer_Size = 0;
  25          uint8_t UART_Input_First = 0;
  26          uint8_t UART_Output_First = 0;
  27          uint8_t TX_Ready =1;
  28          uint8_t Byte = 0;
  29          
  30          uint32_t mV;// Measured voltage in mV
  31          uint32_t i = 6;
  32          uint8_t byteToBeSent = 0;
  33          bool sendByte = false;
  34          uint32_t numMeasurements = 2048;
  35          
  36          //-----------------------------------------------------------------------------
  37          // ADC0EOC_ISR
  38          //-----------------------------------------------------------------------------
  39          //
  40          // ADC0EOC ISR Content goes here. Remember to clear flag bits:
  41          // ADC0CN0::ADINT (Conversion Complete Interrupt Flag)
  42          //
  43          //-----------------------------------------------------------------------------
  44          SI_INTERRUPT (ADC0EOC_ISR, ADC0EOC_IRQn)
  45          {
  46   1              static uint32_t accumulator = 0;     // Accumulator for averaging
  47   1              static uint16_t measurements = 16; // Measurement counter
  48   1              uint32_t result = 0;
  49   1              ADC0CN0_ADINT = 0;// Clear ADC0 conv. complete flag
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/24/2017 15:33:49 PAGE 2   

  50   1      
  51   1              measurements--;
  52   1      
  53   1              if(measurements == 0)
  54   1              {
  55   2                      measurements = 16;
  56   2                      result = (ADC0H*256) + ADC0L;
  57   2                      mV = (result * (2400+1500) / 8191);
  58   2              }
  59   1              if(measurements == 16)
  60   1                      {
  61   2                              i = 3;
  62   2                              SCON0_TI = 1;
  63   2                      }
  64   1                      //Print second MSB
  65   1                      if(measurements == 14)
  66   1                      {
  67   2                              i = 2;
  68   2                              SCON0_TI = 1;
  69   2                      }
  70   1                      //Print third MSB
  71   1                      if(measurements == 12)
  72   1                      {
  73   2                              i = 1;
  74   2                              SCON0_TI = 1;
  75   2                      }
  76   1                      //Print LSB
  77   1                      if(measurements == 10)
  78   1                      {
  79   2                              i = 0;
  80   2                              SCON0_TI = 1;
  81   2                      }
  82   1                      //Print comma
  83   1                      if(measurements == 8)
  84   1                      {
  85   2                              i = 4;
  86   2                              SCON0_TI = 1;
  87   2                      }
  88   1                      if(measurements < 8)
  89   1                      {
  90   2                              i = NOT_SENDING;
  91   2                              SCON0_TI = 0;
  92   2                      }
  93   1      
  94   1              /*//Print MSB
  95   1              if(measurements == 16)
  96   1              {
  97   1                      i = 3;
  98   1                      TX_Ready = 1;
  99   1              }
 100   1              //Print second MSB
 101   1              if(measurements == 14)
 102   1              {
 103   1                      i = 2;
 104   1                      TX_Ready = 1;
 105   1              }
 106   1              //Print third MSB
 107   1              if(measurements == 12)
 108   1              {
 109   1                      i = 1;
 110   1                      TX_Ready = 1;
 111   1              }
 112   1              //Print LSB
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/24/2017 15:33:49 PAGE 3   

 113   1              if(measurements == 10)
 114   1              {
 115   1                      i = 0;
 116   1                      TX_Ready = 1;
 117   1              }
 118   1              //Print comma
 119   1              if(measurements == 8)
 120   1              {
 121   1                      i = 4;
 122   1                      TX_Ready = 1;
 123   1              }
 124   1              if(measurements < 8)
 125   1              {
 126   1                      i = NOT_SENDING;
 127   1                      TX_Ready = 0;
 128   1              }
 129   1              */
 130   1      }
*** WARNING C280 IN LINE 46 OF C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\8051\v4.0.3\examples\EFM8BB1_SLSTK2020A
             -\ADC\ExternalInput\src\Interrupts.c: 'accumulator': unreferenced local variable
 131          
 132          //-----------------------------------------------------------------------------
 133          // TIMER2_ISR
 134          //-----------------------------------------------------------------------------
 135          //
 136          // TIMER2 ISR Content goes here. Remember to clear flag bits:
 137          // TMR2CN0::TF2H (Timer # High Byte Overflow Flag)
 138          // TMR2CN0::TF2L (Timer # Low Byte Overflow Flag)
 139          //
 140          //-----------------------------------------------------------------------------
 141          SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn)
 142          {
 143   1      
 144   1      }
 145          
 146          //-----------------------------------------------------------------------------
 147          // UART0_ISR
 148          //-----------------------------------------------------------------------------
 149          //
 150          // UART0 ISR Content goes here. Remember to clear flag bits:
 151          // SCON0::RI (Receive Interrupt Flag)
 152          // SCON0::TI (Transmit Interrupt Flag)
 153          //
 154          //-----------------------------------------------------------------------------
 155          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
 156          {
 157   1                 if (SCON0_RI == 1)
 158   1                 {
 159   2                       SCON0_RI = 0;
 160   2                       Byte = SBUF0;
 161   2                 }
 162   1      
 163   1                 if (SCON0_TI == 1)             // Check if transmit flag is set
 164   1                 {
 165   2                    SCON0_TI = 0;               // Clear interrupt flag
 166   2                    switch (i)
 167   2                    {
 168   3                                case 0:
 169   3                                      byteToBeSent = 48 + (mV % 10);
 170   3                                      sendByte = true;
 171   3                                      i = NOT_SENDING;
 172   3                                      break;
 173   3                                case 1:
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/24/2017 15:33:49 PAGE 4   

 174   3                                      byteToBeSent = 48 + (mV/10)%10;
 175   3                                      sendByte = true;
 176   3                                      i = NOT_SENDING;
 177   3                                      break;
 178   3                                case 2:
 179   3                                      byteToBeSent = 48 + (mV/100)%10;
 180   3                                      sendByte = true;
 181   3                                      i = NOT_SENDING;
 182   3                                      break;
 183   3                                case 3:
 184   3                                      byteToBeSent = 48 + (mV/1000)%10;
 185   3                                      sendByte = true;
 186   3                                      i = NOT_SENDING;
 187   3                                      break;
 188   3                                case 4:
 189   3                                      byteToBeSent = ',';
 190   3                                      sendByte = true;
 191   3                                      i = NOT_SENDING;
 192   3                                      break;
 193   3                                case NOT_SENDING:
 194   3                                      sendByte = false;
 195   3                                      break;
 196   3                    }
 197   2                    if(sendByte)
 198   2                        SBUF0 = byteToBeSent;
 199   2      
 200   2                 }
 201   1      
 202   1      
 203   1      }
 204          
 205          
 206          
 207          
 208          
 209          
 210          
 211          
 212          
 213          
 214          /*
 215          
 216          
 217          
 218          
 219          
 220          
 221          
 222          
 223          //=========================================================
 224          // src/Interrupts.c: generated by Hardware Configurator
 225          //
 226          // This file will be regenerated when saving a document.
 227          // leave the sections inside the "$[...]" comment tags alone
 228          // or they will be overwritten!
 229          //=========================================================
 230          
 231          
 232          // USER INCLUDES
 233          #include <SI_EFM8BB1_Register_Enums.h>
 234          
 235          //-----------------------------------------------------------------------------
 236          // Global CONSTANTS
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/24/2017 15:33:49 PAGE 5   

 237          //-----------------------------------------------------------------------------
 238          #define UART_BUFFERSIZE        64
 239          
 240          //-----------------------------------------------------------------------------
 241          // Global Variables
 242          //-----------------------------------------------------------------------------
 243          uint8_t UART_Buffer[UART_BUFFERSIZE];
 244          uint8_t UART_Buffer_Size = 0;
 245          uint8_t UART_Input_First = 0;
 246          uint8_t UART_Output_First = 0;
 247          uint8_t TX_Ready =1;
 248          uint8_t Byte = 0;
 249          
 250          //-----------------------------------------------------------------------------
 251          // UART0_ISR
 252          //-----------------------------------------------------------------------------
 253          //
 254          // UART0 ISR Content goes here. Remember to clear flag bits:
 255          // SCON0::RI (Receive Interrupt Flag)
 256          // SCON0::TI (Transmit Interrupt Flag)
 257          //
 258          // This routine is invoked whenever a character is entered or displayed on the
 259          // Hyperterminal.
 260          //
 261          //-----------------------------------------------------------------------------
 262          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
 263          {
 264                     if (SCON0_RI == 1)
 265                     {
 266                        if( UART_Buffer_Size == 0)  {    // If new word is entered
 267                           UART_Input_First = 0;    }
 268          
 269                        SCON0_RI = 0;                          // Clear interrupt flag
 270          
 271                        Byte = SBUF0;                    // Read a character from UART
 272          
 273                        if (UART_Buffer_Size < UART_BUFFERSIZE)
 274                        {
 275                           UART_Buffer[UART_Input_First] = Byte; // Store in array
 276          
 277                           UART_Buffer_Size++;           // Update array's size
 278          
 279                           UART_Input_First++;           // Update counter
 280                        }
 281                     }
 282          
 283                     if (SCON0_TI == 1)                        // Check if transmit flag is set
 284                     {
 285                        SCON0_TI = 0;                          // Clear interrupt flag
 286          
 287                        if (UART_Buffer_Size != 1)       // If buffer not empty
 288                        {
 289                           // If a new word is being output
 290                           if ( UART_Buffer_Size == UART_Input_First ) {
 291                                UART_Output_First = 0;  }
 292          
 293                           // Store a character in the variable byte
 294                           Byte = UART_Buffer[UART_Output_First];
 295          
 296                           if ((Byte >= 0x61) && (Byte <= 0x7A)) { // If upper case letter
 297                              Byte -= 32; }
 298          
 299                           SBUF0 = Byte;                 // Transmit to Hyperterminal
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/24/2017 15:33:49 PAGE 6   

 300          
 301                           UART_Output_First++;          // Update counter
 302          
 303                           UART_Buffer_Size--;           // Decrease array size
 304          
 305                        }
 306                        else
 307                        {
 308                           UART_Buffer_Size = 0;         // Set the array size to 0
 309                           TX_Ready = 1;                 // Indicate transmission complete
 310                        }
 311                     }
 312          }
 313          
 314          SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn)
 315          {
 316          
 317          }
 318          
 319          SI_INTERRUPT (ADC0EOC_ISR, ADC0EOC_IRQn)
 320          {}
 321          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    525    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     88       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
