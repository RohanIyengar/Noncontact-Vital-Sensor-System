C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/02/2017 17:47:06 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\SiliconLabs\S
                    -implicityStudio\v4\developer\sdks\8051\v4.0.3\examples\EFM8BB1_SLSTK2020A\SPI\Master\src\InitDevice.c OMF2 SMALL DEBUG O
                    -BJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCD
                    -IR(C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\8051\v4.0.3\examples\EFM8BB1_SLSTK2020A\SPI\Master\inc;C:/SiliconLa
                    -bs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer
                    -/sdks/8051/v4.0.3//Device/EFM8BB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitD
                    -evice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              WDT_0_enter_DefaultMode_from_RESET();
  25   1              PORTS_0_enter_DefaultMode_from_RESET();
  26   1              PORTS_1_enter_DefaultMode_from_RESET();
  27   1              PBCFG_0_enter_DefaultMode_from_RESET();
  28   1              CLOCK_0_enter_DefaultMode_from_RESET();
  29   1              TIMER01_0_enter_DefaultMode_from_RESET();
  30   1              TIMER16_2_enter_DefaultMode_from_RESET();
  31   1              TIMER16_3_enter_DefaultMode_from_RESET();
  32   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  33   1              SPI_0_enter_DefaultMode_from_RESET();
  34   1              UART_0_enter_DefaultMode_from_RESET();
  35   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  36   1              // [Config Calls]$
  37   1      
  38   1      }
  39          
  40          //================================================================================
  41          // WDT_0_enter_DefaultMode_from_RESET
  42          //================================================================================
  43          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  44   1              // $[WDTCN - Watchdog Timer Control]
  45   1              //Disable Watchdog with key sequence
  46   1              WDTCN = 0xDE; //First key
  47   1              WDTCN = 0xAD; //Second key
  48   1              // [WDTCN - Watchdog Timer Control]$
  49   1      
  50   1      }
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/02/2017 17:47:06 PAGE 2   

  51          
  52          //================================================================================
  53          // PORTS_0_enter_DefaultMode_from_RESET
  54          //================================================================================
  55          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  56   1              // $[P0 - Port 0 Pin Latch]
  57   1              // [P0 - Port 0 Pin Latch]$
  58   1      
  59   1              // $[P0MDOUT - Port 0 Output Mode]
  60   1              /***********************************************************************
  61   1               - P0.0 output is push-pull
  62   1               - P0.1 output is open-drain
  63   1               - P0.2 output is open-drain
  64   1               - P0.3 output is open-drain
  65   1               - P0.4 output is push-pull
  66   1               - P0.5 output is open-drain
  67   1               - P0.6 output is push-pull
  68   1               - P0.7 output is open-drain
  69   1               ***********************************************************************/
  70   1              P0MDOUT = P0MDOUT_B0__PUSH_PULL | P0MDOUT_B1__OPEN_DRAIN
  71   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
  72   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__OPEN_DRAIN
  73   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__OPEN_DRAIN;
  74   1              // [P0MDOUT - Port 0 Output Mode]$
  75   1      
  76   1              // $[P0MDIN - Port 0 Input Mode]
  77   1              // [P0MDIN - Port 0 Input Mode]$
  78   1      
  79   1              // $[P0SKIP - Port 0 Skip]
  80   1              /***********************************************************************
  81   1               - P0.0 pin is skipped by the crossbar
  82   1               - P0.1 pin is skipped by the crossbar
  83   1               - P0.2 pin is skipped by the crossbar
  84   1               - P0.3 pin is skipped by the crossbar
  85   1               - P0.4 pin is not skipped by the crossbar
  86   1               - P0.5 pin is not skipped by the crossbar
  87   1               - P0.6 pin is not skipped by the crossbar
  88   1               - P0.7 pin is not skipped by the crossbar
  89   1               ***********************************************************************/
  90   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
  91   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__NOT_SKIPPED
  92   1                              | P0SKIP_B5__NOT_SKIPPED | P0SKIP_B6__NOT_SKIPPED
  93   1                              | P0SKIP_B7__NOT_SKIPPED;
  94   1              // [P0SKIP - Port 0 Skip]$
  95   1      
  96   1              // $[P0MASK - Port 0 Mask]
  97   1              // [P0MASK - Port 0 Mask]$
  98   1      
  99   1              // $[P0MAT - Port 0 Match]
 100   1              // [P0MAT - Port 0 Match]$
 101   1      
 102   1      }
 103          
 104          //================================================================================
 105          // PORTS_1_enter_DefaultMode_from_RESET
 106          //================================================================================
 107          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 108   1              // $[P1 - Port 1 Pin Latch]
 109   1              // [P1 - Port 1 Pin Latch]$
 110   1      
 111   1              // $[P1MDOUT - Port 1 Output Mode]
 112   1              /***********************************************************************
 113   1               - P1.0 output is push-pull
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/02/2017 17:47:06 PAGE 3   

 114   1               - P1.1 output is push-pull
 115   1               - P1.2 output is open-drain
 116   1               - P1.3 output is open-drain
 117   1               - P1.4 output is push-pull
 118   1               - P1.5 output is open-drain
 119   1               - P1.6 output is open-drain
 120   1               - P1.7 output is open-drain
 121   1               ***********************************************************************/
 122   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__PUSH_PULL
 123   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 124   1                              | P1MDOUT_B4__PUSH_PULL | P1MDOUT_B5__OPEN_DRAIN
 125   1                              | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 126   1              // [P1MDOUT - Port 1 Output Mode]$
 127   1      
 128   1              // $[P1MDIN - Port 1 Input Mode]
 129   1              // [P1MDIN - Port 1 Input Mode]$
 130   1      
 131   1              // $[P1SKIP - Port 1 Skip]
 132   1              /***********************************************************************
 133   1               - P1.0 pin is not skipped by the crossbar
 134   1               - P1.1 pin is not skipped by the crossbar
 135   1               - P1.2 pin is not skipped by the crossbar
 136   1               - P1.3 pin is not skipped by the crossbar
 137   1               - P1.4 pin is skipped by the crossbar
 138   1               - P1.5 pin is not skipped by the crossbar
 139   1               - P1.6 pin is not skipped by the crossbar
 140   1               - P1.7 pin is not skipped by the crossbar
 141   1               ***********************************************************************/
 142   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__NOT_SKIPPED
 143   1                              | P1SKIP_B2__NOT_SKIPPED | P1SKIP_B3__NOT_SKIPPED
 144   1                              | P1SKIP_B4__SKIPPED | P1SKIP_B5__NOT_SKIPPED
 145   1                              | P1SKIP_B6__NOT_SKIPPED | P1SKIP_B7__NOT_SKIPPED;
 146   1              // [P1SKIP - Port 1 Skip]$
 147   1      
 148   1              // $[P1MASK - Port 1 Mask]
 149   1              // [P1MASK - Port 1 Mask]$
 150   1      
 151   1              // $[P1MAT - Port 1 Match]
 152   1              // [P1MAT - Port 1 Match]$
 153   1      
 154   1      }
 155          
 156          //================================================================================
 157          // PBCFG_0_enter_DefaultMode_from_RESET
 158          //================================================================================
 159          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 160   1              // $[XBR2 - Port I/O Crossbar 2]
 161   1              /***********************************************************************
 162   1               - Weak Pullups enabled 
 163   1               - Crossbar enabled
 164   1               ***********************************************************************/
 165   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 166   1              // [XBR2 - Port I/O Crossbar 2]$
 167   1      
 168   1              // $[PRTDRV - Port Drive Strength]
 169   1              // [PRTDRV - Port Drive Strength]$
 170   1      
 171   1              // $[XBR0 - Port I/O Crossbar 0]
 172   1              /***********************************************************************
 173   1               - UART TX, RX routed to Port pins P0.4 and P0.5
 174   1               - SPI I/O routed to Port pins
 175   1               - SMBus 0 I/O unavailable at Port pins
 176   1               - CP0 unavailable at Port pin
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/02/2017 17:47:06 PAGE 4   

 177   1               - Asynchronous CP0 unavailable at Port pin
 178   1               - CP1 unavailable at Port pin
 179   1               - Asynchronous CP1 unavailable at Port pin
 180   1               - SYSCLK unavailable at Port pin
 181   1               ***********************************************************************/
 182   1              XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__ENABLED | XBR0_SMB0E__DISABLED
 183   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 184   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 185   1              // [XBR0 - Port I/O Crossbar 0]$
 186   1      
 187   1              // $[XBR1 - Port I/O Crossbar 1]
 188   1              // [XBR1 - Port I/O Crossbar 1]$
 189   1      
 190   1      }
 191          
 192          //================================================================================
 193          // CLOCK_0_enter_DefaultMode_from_RESET
 194          //================================================================================
 195          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 196   1              // $[CLKSEL - Clock Select]
 197   1              /***********************************************************************
 198   1               - Clock derived from the Internal High-Frequency Oscillator
 199   1               - SYSCLK is equal to selected clock source divided by 1
 200   1               ***********************************************************************/
 201   1              CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 202   1              // [CLKSEL - Clock Select]$
 203   1      
 204   1      }
 205          
 206          //================================================================================
 207          // SPI_0_enter_DefaultMode_from_RESET
 208          //================================================================================
 209          extern void SPI_0_enter_DefaultMode_from_RESET(void) {
 210   1              // $[SPI0CKR - SPI0 Clock Rate]
 211   1              /***********************************************************************
 212   1               - SPI0 Clock Rate = 0x34
 213   1               ***********************************************************************/
 214   1              SPI0CKR = (0x34 << SPI0CKR_SPI0CKR__SHIFT);
 215   1              // [SPI0CKR - SPI0 Clock Rate]$
 216   1      
 217   1              // $[SPI0CFG - SPI0 Configuration]
 218   1              /***********************************************************************
 219   1               - Enable master mode. Operate as a master
 220   1               ***********************************************************************/
 221   1              SPI0CFG |= SPI0CFG_MSTEN__MASTER_ENABLED;
 222   1              // [SPI0CFG - SPI0 Configuration]$
 223   1      
 224   1              // $[SPI0CN0 - SPI0 Control]
 225   1              /***********************************************************************
 226   1               - Enable the SPI module
 227   1               - 4-Wire Single-Master Mode. NSS is an output and logic high
 228   1               ***********************************************************************/
 229   1              SPI0CN0 |= SPI0CN0_SPIEN__ENABLED | SPI0CN0_NSSMD__4_WIRE_MASTER_NSS_HIGH;
 230   1              // [SPI0CN0 - SPI0 Control]$
 231   1      
 232   1      }
 233          
 234          //================================================================================
 235          // INTERRUPT_0_enter_DefaultMode_from_RESET
 236          //================================================================================
 237          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 238   1              // $[EIE1 - Extended Interrupt Enable 1]
 239   1              // [EIE1 - Extended Interrupt Enable 1]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/02/2017 17:47:06 PAGE 5   

 240   1      
 241   1              // $[EIP1 - Extended Interrupt Priority 1]
 242   1              // [EIP1 - Extended Interrupt Priority 1]$
 243   1      
 244   1              // $[IE - Interrupt Enable]
 245   1              /***********************************************************************
 246   1               - Enable each interrupt according to its individual mask setting
 247   1               - Disable external interrupt 0
 248   1               - Disable external interrupt 1
 249   1               - Enable interrupt requests generated by SPI0
 250   1               - Disable all Timer 0 interrupt
 251   1               - Disable all Timer 1 interrupt
 252   1               - Disable Timer 2 interrupt
 253   1               - Enable UART0 interrupt
 254   1               ***********************************************************************/
 255   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 256   1                              | IE_ESPI0__ENABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 257   1                              | IE_ET2__DISABLED | IE_ES0__ENABLED;
 258   1              // [IE - Interrupt Enable]$
 259   1      
 260   1              // $[IP - Interrupt Priority]
 261   1              // [IP - Interrupt Priority]$
 262   1      
 263   1      }
 264          
 265          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 266   1              // $[CKCON0 - Clock Control 0]
 267   1              /***********************************************************************
 268   1               - System clock divided by 4
 269   1               - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 270   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 271   1               - Timer 2 low byte uses the system clock
 272   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 273   1               - Timer 3 low byte uses the system clock
 274   1               - Timer 1 uses the system clock
 275   1               ***********************************************************************/
 276   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE
 277   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__SYSCLK
 278   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__SYSCLK
 279   1                              | CKCON0_T1M__SYSCLK;
 280   1              // [CKCON0 - Clock Control 0]$
 281   1      
 282   1              // $[TMOD - Timer 0/1 Mode]
 283   1              /***********************************************************************
 284   1               - Mode 0, 13-bit Counter/Timer
 285   1               - Mode 2, 8-bit Counter/Timer with Auto-Reload
 286   1               - Timer Mode
 287   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 288   1               - Timer Mode
 289   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 290   1               ***********************************************************************/
 291   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 292   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 293   1              // [TMOD - Timer 0/1 Mode]$
 294   1      
 295   1              // $[TCON - Timer 0/1 Control]
 296   1              /***********************************************************************
 297   1               - Start Timer 1 running
 298   1               ***********************************************************************/
 299   1              TCON |= TCON_TR1__RUN;
 300   1              // [TCON - Timer 0/1 Control]$
 301   1      
 302   1      }
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/02/2017 17:47:06 PAGE 6   

 303          
 304          extern void UART_0_enter_DefaultMode_from_RESET(void) {
 305   1      
 306   1              // $[SCON0 - UART0 Serial Port Control]
 307   1              /***********************************************************************
 308   1               - UART0 reception enabled
 309   1               ***********************************************************************/
 310   1              SCON0 |= SCON0_REN__RECEIVE_ENABLED;
 311   1              // [SCON0 - UART0 Serial Port Control]$
 312   1      
 313   1      }
 314          
 315          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 316   1              // $[Timer Initialization]
 317   1              // Save Timer Configuration
 318   1              uint8_t TMR2CN0_TR2_save;
 319   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 320   1              // Stop Timer
 321   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 322   1              // [Timer Initialization]$
 323   1      
 324   1              // $[TMR2CN0 - Timer 2 Control]
 325   1              // [TMR2CN0 - Timer 2 Control]$
 326   1      
 327   1              // $[TMR2H - Timer 2 High Byte]
 328   1              // [TMR2H - Timer 2 High Byte]$
 329   1      
 330   1              // $[TMR2L - Timer 2 Low Byte]
 331   1              // [TMR2L - Timer 2 Low Byte]$
 332   1      
 333   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 334   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 335   1      
 336   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 337   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 338   1      
 339   1              // $[TMR2CN0]
 340   1              // [TMR2CN0]$
 341   1      
 342   1              // $[Timer Restoration]
 343   1              // Restore Timer Configuration
 344   1              TMR2CN0 |= TMR2CN0_TR2_save;
 345   1              // [Timer Restoration]$
 346   1      
 347   1      }
 348          
 349          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 350   1              // $[Timer Initialization]
 351   1              // Save Timer Configuration
 352   1              uint8_t TMR3CN0_TR3_save;
 353   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 354   1              // Stop Timer
 355   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 356   1              // [Timer Initialization]$
 357   1      
 358   1              // $[TMR3CN0 - Timer 3 Control]
 359   1              // [TMR3CN0 - Timer 3 Control]$
 360   1      
 361   1              // $[TMR3H - Timer 3 High Byte]
 362   1              // [TMR3H - Timer 3 High Byte]$
 363   1      
 364   1              // $[TMR3L - Timer 3 Low Byte]
 365   1              // [TMR3L - Timer 3 Low Byte]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/02/2017 17:47:06 PAGE 7   

 366   1      
 367   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 368   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 369   1      
 370   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 371   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 372   1      
 373   1              // $[TMR3CN0]
 374   1              // [TMR3CN0]$
 375   1      
 376   1              // $[Timer Restoration]
 377   1              // Restore Timer Configuration
 378   1              TMR3CN0 |= TMR3CN0_TR3_save;
 379   1              // [Timer Restoration]$
 380   1      
 381   1      }
 382          
 383          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 384   1              // $[Timer Initialization]
 385   1              //Save Timer Configuration
 386   1              uint8_t TCON_save;
 387   1              TCON_save = TCON;
 388   1              //Stop Timers
 389   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 390   1      
 391   1              // [Timer Initialization]$
 392   1      
 393   1              // $[TH0 - Timer 0 High Byte]
 394   1              // [TH0 - Timer 0 High Byte]$
 395   1      
 396   1              // $[TL0 - Timer 0 Low Byte]
 397   1              // [TL0 - Timer 0 Low Byte]$
 398   1      
 399   1              // $[TH1 - Timer 1 High Byte]
 400   1              /***********************************************************************
 401   1               - Timer 1 High Byte = 0x96
 402   1               ***********************************************************************/
 403   1              TH1 = (0x96 << TH1_TH1__SHIFT);
 404   1              // [TH1 - Timer 1 High Byte]$
 405   1      
 406   1              // $[TL1 - Timer 1 Low Byte]
 407   1              // [TL1 - Timer 1 Low Byte]$
 408   1      
 409   1              // $[Timer Restoration]
 410   1              //Restore Timer Configuration
 411   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 412   1      
 413   1              // [Timer Restoration]$
 414   1      
 415   1      }
 416          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    135    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/02/2017 17:47:06 PAGE 8   

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
