C51 COMPILER V9.53.0.0   EFM8BB1_SPI0_MASTER                                               05/02/2017 17:47:06 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8BB1_SPI0_MASTER
OBJECT MODULE PLACED IN .\src\EFM8BB1_SPI0_Master.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\SiliconLabs\S
                    -implicityStudio\v4\developer\sdks\8051\v4.0.3\examples\EFM8BB1_SLSTK2020A\SPI\Master\src\EFM8BB1_SPI0_Master.c OMF2 SMAL
                    -L DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPRO
                    -MOTE INCDIR(C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\8051\v4.0.3\examples\EFM8BB1_SLSTK2020A\SPI\Master\inc;C:/
                    -SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/
                    -developer/sdks/8051/v4.0.3//Device/EFM8BB1/inc) PRINT(.\src\EFM8BB1_SPI0_Master.lst) COND PAGEWIDTH(120) PAGELENGTH(65) 
                    -OBJECT(.\src\EFM8BB1_SPI0_Master.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8BB1_SPI0_Master.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This example demonstrates the SPI interface in 4-wire, master mode. This
  10          // example is intended to be used with the SPI_Slave example.
  11          //
  12          // The SPI clock in this example is limited to 1 MHz when used with the
  13          // SPI0_Slave code example. During a SPI_Read, the slave needs some time to
  14          // interpret the command and write the appropriate data to the SPI0DAT
  15          // register, and the slave no longer has enough time to complete the
  16          // SPI_READ_BUFFER command with a clock greater than 1 MHz. For faster SPI
  17          // clocks, a dummy byte between the command and the first byte of Read data
  18          // will be required.
  19          //
  20          // Resources:
  21          //   SYSCLK - 24.5 MHz HFOSC / 1
  22          //   SPI    - Master
  23          //   P0.0   - Display enable
  24          //   P0.6   - SPI SCK
  25          //   P0.7   - SPI MISO
  26          //   P1.0   - SPI MOSI
  27          //   P1.1   - SPI NSS
  28          //   P1.4   - LED
  29          //
  30          //-----------------------------------------------------------------------------
  31          // How To Test: EFM8BB1 STK (SPI Master) + EFM8BB1 STK (SPI Slave)
  32          //-----------------------------------------------------------------------------
  33          // 1) Connect the device first EFM8BB1 STK to second EFM8BB1 STK running the
  34          //    corresponding SPI_Slave code.
  35          // 2) Place the switch in "AEM" mode.
  36          // 3) Connect the EFM8BB1 STK board to a PC using a mini USB cable.
  37          // 4) Compile and download code to the first EFM8BB1 STK board.
  38          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  39          //    click the Debug button in the quick menu, or press F11.
  40          // 5) Run the code.
  41          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  42          //    click the Resume button in the quick menu, or press F8.
  43          // 6) If the communication passes, the LEDs on both the Master
  44          //    and Slave boards will blink slowly. If it fails, the LEDs will be off.
  45          //
  46          // Target:         EFM8BB1
  47          // Tool chain:     Generic
  48          //
  49          // Release 0.1 (ST)
  50          //    - Initial Revision
C51 COMPILER V9.53.0.0   EFM8BB1_SPI0_MASTER                                               05/02/2017 17:47:06 PAGE 2   

  51          //    - 10 OCT 2014
  52          //
  53          
  54          //-----------------------------------------------------------------------------
  55          // Includes
  56          //-----------------------------------------------------------------------------
  57          #include <SI_EFM8BB1_Register_Enums.h>
  58          #include "InitDevice.h"
  59          #include "EFM8BB1_SPI0_Master.h"
  60          #include "stdbool.h"
  61          
  62          //-----------------------------------------------------------------------------
  63          // Pin Definitions
  64          //-----------------------------------------------------------------------------
  65          SI_SBIT (DISP_EN, SFR_P0, 0);          // Display Enable
  66          #define DISP_BC_DRIVEN   0             // 0 = Board Controller drives display
  67          #define DISP_EFM8_DRIVEN 1             // 1 = EFM8 drives display
  68          
  69          SI_SBIT (LED0, SFR_P1, 4);             // P1.4 LED Green
  70          #define LED_ON  0
  71          #define LED_OFF 1
  72          
  73          //-----------------------------------------------------------------------------
  74          // Global Variables
  75          //-----------------------------------------------------------------------------
  76          uint8_t SPI_Data = 0xA5;
  77          uint8_t SPI_Data_Array[MAX_BUFFER_SIZE] = {0};
  78          bool Error_Flag = 0;
  79          uint8_t Command = 0x00;
  80          uint8_t ch0Data[3] = 0;
  81          uint8_t ch1Data[3] = 0;
  82          uint32_t uartCounter = 0;
  83          bool transmitComplete = false;
  84          //-----------------------------------------------------------------------------
  85          // Function Prototypes
  86          //-----------------------------------------------------------------------------
  87          void SPI_LED_On (void);
  88          void SPI_LED_Off (void);
  89          void SPI_Byte_Write (void);
  90          void SPI_Byte_Read (void);
  91          void SPI_Array_Write (void);
  92          void SPI_Array_Read (void);
  93          void Delay(void);
  94          
  95          //-----------------------------------------------------------------------------
  96          // Main Routine
  97          //-----------------------------------------------------------------------------
  98          void main(void)
  99          {
 100   1              //Initialize ADC command registers
 101   1              enter_DefaultMode_from_RESET();
 102   1      
 103   1                 DISP_EN = DISP_BC_DRIVEN;           // Display not driven by EFM8
 104   1      
 105   1                 IE_EA = 1;                          // Enable global interrupts
 106   1               /*
 107   1                 SPI_Data = 0x00; //CH0_CONFIG address
 108   1                 SPI_Byte_Write();
 109   1                 SPI_Data = 0x00; //CH0_CONFIG data
 110   1                 SPI_Byte_Write();
 111   1                 Delay();
 112   1      
 113   1                 SPI_Data = 0x01;  //CH1_CONFIG address
C51 COMPILER V9.53.0.0   EFM8BB1_SPI0_MASTER                                               05/02/2017 17:47:06 PAGE 3   

 114   1                 SPI_Byte_Write();
 115   1                 SPI_Data = 0x00;  //CH1_CONFIG data
 116   1                 SPI_Byte_Write();
 117   1                 Delay();
 118   1      
 119   1                 SPI_Data = 0x08;      //CH_DISABLE address
 120   1                 SPI_Byte_Write();
 121   1                 SPI_Data = 0xFC;      //CH_DISABLE data
 122   1                 SPI_Byte_Write();
 123   1                 Delay();
 124   1      
 125   1                 SPI_Data = 0x11;  //GENERAL_USER_CONFIG_1 address
 126   1                 SPI_Byte_Write();
 127   1                 SPI_Data = 0x60;      //GENERAL_USER_CONFIG_1 data
 128   1                 SPI_Byte_Write();
 129   1                 Delay();
 130   1      
 131   1                 SPI_Data = 0x12;  //GENERAL_USER_CONFIG_2 address
 132   1                 SPI_Byte_Write();
 133   1                 SPI_Data = 0x06;      //GENERAL_USER_CONFIG_2 data
 134   1                 SPI_Byte_Write();
 135   1                 Delay();
 136   1      
 137   1                 SPI_Data = 0x13;  //GENERAL_USER_CONFIG_3 address
 138   1                 SPI_Byte_Write();
 139   1                 SPI_Data = 0xC0;      //GENERAL_USER_CONFIG_3 data
 140   1                 SPI_Byte_Write();
 141   1                 Delay();
 142   1      
 143   1                 SPI_Data = 0x14;  //DOUT_FORMAT address
 144   1                 SPI_Byte_Write();
 145   1                 SPI_Data = 0x20;      //DOUT_FORMAT data
 146   1                 SPI_Byte_Write();
 147   1                 Delay();
 148   1      */
 149   1      
 150   1                 SPI_Data_Array[0] = 0x00; //CH0_CONFIG address
 151   1                 SPI_Data_Array[1] = 0x00; //CH0_CONFIG data
 152   1                 SPI_Array_Write();
 153   1                 Delay();
 154   1      
 155   1                 SPI_Data_Array[0] = 0x01; //CH1_CONFIG address
 156   1                 SPI_Data_Array[1] = 0x00; //CH1_CONFIG data
 157   1                 SPI_Array_Write();
 158   1                 Delay();
 159   1      
 160   1                 SPI_Data_Array[0] = 0x08;     //CH_DISABLE address
 161   1                 SPI_Data_Array[1] = 0xFC;     //CH_DISABLE data
 162   1                 SPI_Array_Write();
 163   1                 Delay();
 164   1      
 165   1                 SPI_Data_Array[0] = 0x11;  //GENERAL_USER_CONFIG_1 address
 166   1                 SPI_Data_Array[1] = 0x60;     //GENERAL_USER_CONFIG_1 data
 167   1                 SPI_Array_Write();
 168   1                 Delay();
 169   1      
 170   1                 SPI_Data_Array[0] = 0x12;  //GENERAL_USER_CONFIG_2 address
 171   1                 SPI_Data_Array[1] = 0x06;     //GENERAL_USER_CONFIG_2 data
 172   1                 SPI_Array_Write();
 173   1                 Delay();
 174   1      
 175   1                 SPI_Data_Array[0] = 0x13;  //GENERAL_USER_CONFIG_3 address
 176   1                 SPI_Data_Array[1] = 0xC0;     //GENERAL_USER_CONFIG_3 data
C51 COMPILER V9.53.0.0   EFM8BB1_SPI0_MASTER                                               05/02/2017 17:47:06 PAGE 4   

 177   1                 SPI_Array_Write();
 178   1                 Delay();
 179   1      
 180   1                 SPI_Data_Array[0] = 0x14;  //DOUT_FORMAT address
 181   1                 SPI_Data_Array[1] = 0x20;     //DOUT_FORMAT data
 182   1                 SPI_Array_Write();
 183   1                 Delay();
 184   1      
 185   1         while (1)
 186   1                 {
 187   2      /*         SPI_Byte_Read(); //Read header0
 188   2                 SPI_Byte_Read(); //Read first byte
 189   2                 ch0Data[0] = SPI_Data;
 190   2      
 191   2                 SPI_Byte_Read(); //Read second byte
 192   2                 ch0Data[1] = SPI_Data;
 193   2                 SPI_Byte_Read(); //Read third byte
 194   2                 ch0Data[2] = SPI_Data;
 195   2      
 196   2                 SPI_Byte_Read(); //Read header1
 197   2                 SPI_Byte_Read(); //Read first byte
 198   2                 ch1Data[0] = SPI_Data;
 199   2                 SPI_Byte_Read(); //Read second byte
 200   2                 ch1Data[1] = SPI_Data;
 201   2                 SPI_Byte_Read(); //Read third byte
 202   2                 ch1Data[2] = SPI_Data;
 203   2      */
 204   2                 //Trigger UART Interrupt
 205   2                 uartCounter = 0;
 206   2                 SCON0_TI = 1; //Trigger UART Interrupt
 207   2                 //Delay();
 208   2                 uartCounter = 1;
 209   2                 SCON0_TI = 1;
 210   2                 //Delay();
 211   2                 uartCounter = 2;
 212   2                 SCON0_TI = 1;
 213   2                 //Delay();
 214   2                 uartCounter = 3;
 215   2                 SCON0_TI = 1;
 216   2                 //Delay();
 217   2                 uartCounter = 4;
 218   2                 SCON0_TI = 1;
 219   2                 //Delay();
 220   2                 uartCounter = 5;
 221   2                 SCON0_TI = 1;
 222   2                 //Delay();
 223   2                 }
 224   1      }
 225          
 226          //-----------------------------------------------------------------------------
 227          // Support Routines
 228          //-----------------------------------------------------------------------------
 229          
 230          //-----------------------------------------------------------------------------
 231          // SPI_LED_On
 232          //-----------------------------------------------------------------------------
 233          //
 234          // Return Value : None
 235          // Parameters   : None
 236          //
 237          // Turns the LED on the SPI Slave on.  The slave does not respond to this
 238          // command, so the command consists of:
 239          //
C51 COMPILER V9.53.0.0   EFM8BB1_SPI0_MASTER                                               05/02/2017 17:47:06 PAGE 5   

 240          // Command = SLAVE_LED_ON
 241          // Length = 1 byte (the command itself)
 242          //
 243          //-----------------------------------------------------------------------------
 244          void SPI_LED_On(void)
 245          {
 246   1         while(!SPI0CN0_NSSMD0);             // Wait until the SPI is free, in case
 247   1                                             // it's already busy
 248   1      
 249   1         SPI0CN0_NSSMD0 = 0;
 250   1      
 251   1         Command = SLAVE_LED_ON;
 252   1      
 253   1         SPI0DAT = Command;
 254   1      
 255   1         // The rest of this command will be handled by the SPI ISR, which will
 256   1         // trigger when SPI0CN0_SPIF is set from sending the Command
 257   1      }
 258          
 259          //-----------------------------------------------------------------------------
 260          // SPI_LED_Off
 261          //-----------------------------------------------------------------------------
 262          //
 263          // Return Value : None
 264          // Parameters   : None
 265          //
 266          // Turns the LED on the SPI Slave off.  The slave does not respond to this
 267          // command, so the command consists of:
 268          //
 269          // Command = SLAVE_LED_OFF
 270          // Length = 1 byte (the command itself)
 271          //
 272          //-----------------------------------------------------------------------------
 273          void SPI_LED_Off(void)
 274          {
 275   1         while(!SPI0CN0_NSSMD0);             // Wait until the SPI is free, in case
 276   1                                             // it's already busy
 277   1      
 278   1         SPI0CN0_NSSMD0 = 0;
 279   1      
 280   1         Command = SLAVE_LED_OFF;
 281   1      
 282   1         SPI0DAT = Command;
 283   1      
 284   1         // The rest of this command will be handled by the SPI ISR, which will
 285   1         // trigger when SPI0CN0_SPIF is set from sending the Command
 286   1      }
 287          
 288          //-----------------------------------------------------------------------------
 289          // SPI_Byte_Write
 290          //-----------------------------------------------------------------------------
 291          //
 292          // Return Value : None
 293          // Parameters   : None
 294          //
 295          // Note: SPI_Data must contain the data to be sent before calling this
 296          // function.
 297          //
 298          // Writes a single byte to the SPI Slave.  The slave does not respond to this
 299          // command, so the command consists of:
 300          //
 301          // Command = SPI_WRITE
 302          // Length = 1 byte of command, 1 byte of data
C51 COMPILER V9.53.0.0   EFM8BB1_SPI0_MASTER                                               05/02/2017 17:47:06 PAGE 6   

 303          //
 304          //-----------------------------------------------------------------------------
 305          void SPI_Byte_Write(void)
 306          {
 307   1         while(!SPI0CN0_NSSMD0);             // Wait until the SPI is free, in case
 308   1                                             // it's already busy
 309   1      
 310   1         SPI0CN0_NSSMD0 = 0;
 311   1      
 312   1         Command = SPI_WRITE;
 313   1         //SPI0DAT = SPI_Data;
 314   1         //SPI0DAT = Command;
 315   1         SPI0CN0_SPIF = 1;
 316   1      
 317   1         // The rest of this command will be handled by the SPI ISR, which will
 318   1         // trigger when SPI0CN0_SPIF is set from sending the Command
 319   1      }
 320          
 321          //-----------------------------------------------------------------------------
 322          // SPI_Byte_Read
 323          //-----------------------------------------------------------------------------
 324          //
 325          // Return Value : None
 326          // Parameters   : None
 327          //
 328          // Note: SPI_Data will contain the data received after calling this function.
 329          //
 330          // Reads a single byte from the SPI Slave.  The command consists of:
 331          //
 332          // Command = SPI_READ
 333          // Length = 1 byte of command, 1 byte of data
 334          //
 335          //-----------------------------------------------------------------------------
 336          void SPI_Byte_Read(void)
 337          {
 338   1         while(!SPI0CN0_NSSMD0);             // Wait until the SPI is free, in case
 339   1                                             // it's already busy
 340   1      
 341   1         SPI0CN0_NSSMD0 = 0;
 342   1      
 343   1         Command = SPI_READ;
 344   1      
 345   1         SPI0DAT = Command;
 346   1      
 347   1         // The rest of this command will be handled by the SPI ISR, which will
 348   1         // trigger when SPI0CN0_SPIF is set from sending the Command
 349   1      }
 350          
 351          //-----------------------------------------------------------------------------
 352          // SPI_Array_Write
 353          //-----------------------------------------------------------------------------
 354          //
 355          // Return Value : None
 356          // Parameters   : None
 357          //
 358          // Note: SPI_Data_Array must contain the data to be sent before calling this
 359          // function.
 360          //
 361          // Writes an array of values of size MAX_BUFFER_SIZE to the SPI Slave.  The
 362          // command consists of:
 363          //
 364          // Command = SPI_WRITE_BUFFER
 365          // Length = 1 byte of command, MAX_BUFFER_SIZE bytes of data
C51 COMPILER V9.53.0.0   EFM8BB1_SPI0_MASTER                                               05/02/2017 17:47:06 PAGE 7   

 366          //
 367          // Note: Polled mode is used for this function in order to buffer the data
 368          // being sent using the SPI0CN0_TXBMT flag.
 369          //
 370          //-----------------------------------------------------------------------------
 371          void SPI_Array_Write(void)
 372          {
 373   1         uint8_t array_index;
 374   1      
 375   1         while(!SPI0CN0_NSSMD0);             // Wait until the SPI is free, in case
 376   1                                             // it's already busy
 377   1      
 378   1         IE_ESPI0 = 0;                       // Disable SPI interrupts
 379   1      
 380   1         SPI0CN0_NSSMD0 = 0;
 381   1      
 382   1        /* SPI0DAT = SPI_WRITE_BUFFER;         // Load the XMIT register
 383   1         while(SPI0CN0_TXBMT != 1)           // Wait until the command is moved into
 384   1         {                                   // the XMIT buffer
 385   1         }
 386   1      */
 387   1         for(array_index = 0; array_index < 2; array_index++)
 388   1         {
 389   2            SPI0DAT = SPI_Data_Array[array_index]; // Load the data into the buffer
 390   2            while(SPI0CN0_TXBMT != 1)        // Wait until the data is moved into
 391   2            {                                // the XMIT buffer
 392   3            }
 393   2         }
 394   1         SPI0CN0_SPIF = 0;
 395   1         while(SPI0CN0_SPIF != 1)            // Wait until the last byte of the
 396   1         {                                   // data reaches the Slave
 397   2         }
 398   1         SPI0CN0_SPIF = 0;
 399   1      
 400   1         SPI0CN0_NSSMD0 = 1;                 // Disable the Slave
 401   1      
 402   1         IE_ESPI0 = 1;                       // Re-enable SPI interrupts
 403   1      }
 404          
 405          //-----------------------------------------------------------------------------
 406          // SPI_Array_Read
 407          //-----------------------------------------------------------------------------
 408          //
 409          // Return Value : None
 410          // Parameters   : None
 411          //
 412          // Note: SPI_Data_Array will contain the data received after calling this
 413          // function.
 414          //
 415          // Reads a single byte from the SPI Slave.  The command consists of:
 416          //
 417          // Command = SPI_READ_BUFFER
 418          // Length = 1 byte of command, MAX_BUFFER_SIZE bytes of data
 419          //
 420          //-----------------------------------------------------------------------------
 421          void SPI_Array_Read(void)
 422          {
 423   1         while(!SPI0CN0_NSSMD0);             // Wait until the SPI is free, in case
 424   1                                             // it's already busy
 425   1      
 426   1         SPI0CN0_NSSMD0 = 0;
 427   1      
 428   1         Command = SPI_READ_BUFFER;
C51 COMPILER V9.53.0.0   EFM8BB1_SPI0_MASTER                                               05/02/2017 17:47:06 PAGE 8   

 429   1      
 430   1         SPI0DAT = Command;
 431   1      
 432   1         // The rest of this command will be handled by the SPI ISR, which will
 433   1         // trigger when SPI0CN0_SPIF is set from sending the Command
 434   1      }
 435          
 436          //-----------------------------------------------------------------------------
 437          // Delay
 438          //-----------------------------------------------------------------------------
 439          //
 440          // Return Value : None
 441          // Parameters   : None
 442          //
 443          // Delay for little while (used for blinking the LEDs)
 444          //
 445          //-----------------------------------------------------------------------------
 446          void Delay(void)
 447          {
 448   1         uint32_t count;
 449   1      //
 450   1         for (count = 4; count > 0; count--);
 451   1      }
 452          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    308    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
